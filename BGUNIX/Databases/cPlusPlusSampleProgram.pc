/** Oracle C++ dbms example ... A database with 1 table
Program cPlusPlusSampleProgram.pc: on bgunix @ /home/cs/kresman/4620/

create table supplier (supplierNumber number(2), supplierName char(12));
rem load the data in
insert into supplier values (1 , 'Ray' );
insert into supplier values (2, 'Dave');
Table created.

1 row created.
1 row created.

SQL> select * from supplier where supplierNumber = 1;

SUPPLIERNUMBER SUPPLIERNAME
-------------- ------------
             1 Ray


*****  Program run  output

Connected to ORACLE as user: sp201611@cs11g

Query is  select supplierName from Supplier  where supplierNumber = 1

supplier name = Ray

*/


/** ---------------------------------
README 1: Interactive sqlplus access cs11g
Database cs11g is on another machine, accessible through bgunix.bgsu.edu
Log onto bgunix first!
-------------------------------------*/


/**

bgunix% sqlplus

SQL*Plus: Release 10.2.0.4.0 - Production on Wed Feb 17 12:23:43 2016

Copyright (c) 1982, 2007, Oracle.  All Rights Reserved.

Enter user-name: sp201611@cs11g
Enter password:

Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.3.0 - 64bit Production
With the Partitioning, Automatic Storage Management, OLAP, Data Mining
and Real Application Testing options

SQL> 

		Changing password
SQL> password
Changing password for SP201611
Old password:
New password:
Retype new password:
Password changed
SQL> exit
Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.3.0 - 64bit Production
With the Partitioning, Automatic Storage Management, OLAP, Data Mining
and Real Application Testing options


*/

/** ---------------------------------
README 2: Compile and run c++ programs
Database cs11g is on another machine, accessible through bgunix.bgsu.edu
Log onto bgunix first!
-------------------------------------*/

/**

Source file 		   //fileName.pc   please keep a 2nd copy!!
oracleCC  fileName         //compile, output is fileName
                           //".pc" to ".c" to just fileName
			   //if no error, should see object "fileName" 
fileName                   //run the file

*/

/** ---------------------------------
README 3: Detect compile errors
Database cs11g is on another machine, accessible through bgunix.bgsu.edu
Log onto bgunix first!
-------------------------------------*/

/**

oracleCC  fileName          //see errors, line # abc in fileName.c
                            //Or see errors in fileName.lis
                            //OR, says errors, but no line #

oracleCCdebug fileName     //leaves fileName.c or .lis - look for line # abc
                           //to locate error in "c" file
                           //Then, fix the ".pc" file, then repeat

Example 1: Made an intentional error, so you can see it
oracleCC  cPlusPlusSampleProgram                                       //Step 1
Could not open input file "cPlusPlusSampleProgram.c".
ld: fatal: file cPlusPlusSampleProgram.o: open failed: No such file or directory
ld: fatal: File processing errors. No output written to cPlusPlusSampleProgram

oracleCCdebug      cPlusPlusSampleProgram                                  //Step 2

              ------------
bgunix% oracleCCdebug cPlusPlusSampleProgram

Pro*C/C++: Release 10.2.0.4.0 - Production on Wed Feb 17 14:37:40 2016

Copyright (c) 1982, 2007, Oracle.  All rights reserved.

System default option values taken from: /usr/local/oracle/u00/app/oracle/product/10.2.0/db/precomp/admin/pcscfg.cfg

Error at line 191, column 10 in file cPlusPlusSampleProgram.pc
#include <iostream.h>
.........1
PCC-S-02016, unable to open include file	          //IGNORE !
Syntax error at line 211, column 3, file cPlusPlusSampleProgram.pc:
Error at line 211, column 3 in file 1.pc
  car    inputSupplierName[50];         //entered using cin
..1
PCC-S-02201, Encountered the symbol "car" when expecting one of the following:

   auto, char, const, double, enum, extern, float, int, long,
   ulong_varchar, OCIBFileLocator OCIBlobLocator,
   
   The symbol "enum," was substituted for "car" to continue.

Error at line 0, column 0 in file 1.pc
PCC-F-02102, Fatal error while doing C preprocessing
              ------------

Example 2: Another intentional error
           (removed a prototype to cause this error)
oracleCC  cPlusPlusSampleProgram
"cPlusPlusSampleProgram.c", line 515: Error: The function "commitAndExit" must have a prototype.
1 Error(s) detected.
ld: fatal: file cPlusPlusSampleProgram.o: open failed: No such file or directory
ld: fatal: File processing errors. No output written to cPlusPlusSampleProgram


*/

/** ---------------------------------
README 4: How to use 'sql statements' in C++ - some basics
Database cs11g is on another machine, accessible through bgunix.bgsu.edu
Log onto bgunix first!
-------------------------------------*/

/**

//      Query: select sname, status from supplier where sname = :placeHolder
//      placeHolder is NOT defined within your program

//      Defining input and output variables when they are strings
//      exec sql open C1  using :dBaseInputCharTypeSupplierName;
//              string  INPUT is defined as "char" type
//              integer INPUT is defined as "int"  type
//              You enter Smith from terminal.
//              cin >> dBaseInputCharTypeSupplierName  fills
//                      dBaseInputCharTypeSupplierName with "Smith"

//exec sql FETCH C1 INTO :dBaseOutputVARCHARtypeSupplierName, supplierStatus;
//              string  OUTPUT is defined as "varchar"
//              integer OUTPUT is defined as "int"
//              Print supplier name as
//                   cout << "supplier name = "
//                   << (char *)dBaseOutputVARCHARtypeSupplierName.arr << endl;


                ---- While loop ... select gets many tuples -------

    EXEC SQL OPEN C USING :hostLanguageVariable;
//  Break the loop when all data have been retrieved.
    EXEC SQL WHENEVER NOT FOUND DO break;

//  Loop until the NOT FOUND condition is detected.
    while (1) {
        //Get next tuple... on eof you "break" due to whenever...
        EXEC SQL FETCH C INTO :getField1, :getField2, ...;
        //Print what is fetched
    }

*/

/** ---------------------------------
README 5: A C++ program with sql statements in it
Database cs11g is on another machine, accessible through bgunix.bgsu.edu
Log onto bgunix first!
-------------------------------------*/

/**

//  compile: oracleCC fileName
//  Execute  a hardCoded sql query


/**  Program run snapshot

Connected to ORACLE as user: sp201611@cs11g

Query is  select supplierName from Supplier  where supplierNumber = 1

supplier name = Ray

*/


#include <iostream.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>

// Parse=partial by default when code=cpp so, preprocessor directives are
// recognized and parsed fully.
#define     UNAME_LEN      20
#define     PWD_LEN        40

// Declare section is required when CODE=CPP and/or PARSE={PARTIAL|NONE}
exec sql begin declare section;
  VARCHAR username[UNAME_LEN];  // VARCHAR is an ORACLE supplied struct
				// Has actual data & length
  varchar password[PWD_LEN];    // varchar can be in lower case also  
  varchar sql_statement[1000];	//holds the sql stat being constructed..
  int supplierNo;

  char    inputSupplierName[50];   	//entered using cin
  varchar outputSupplierName[50];	//retrieved output from database

exec sql end declare section;

// Declare error handling function
void sql_error(char *msg);    
void connectToDatabase();
void commitAndExit() ;
void buildAhardCodedSQL();
void prepareAndExecuteIt ();
exec sql include sqlca;

main()
{

//  Call sql_error() function on any error in an embedded SQL statement
    exec sql WHENEVER SQLERROR DO sql_error("Oracle error");


    exec sql 
	WHENEVER SQLERROR 
        DO sql_error("ORACLE error:"); 
    connectToDatabase();

    buildAhardCodedSQL();
    prepareAndExecuteIt ();
    commitAndExit();

}

void connectToDatabase() {

/*  Hardcoded username and password  */
    strcpy((char *)username.arr,"putYourUserPassword");
    strcpy((char *)password.arr,"putYourUserName");
    username.len = strlen((char *) username.arr);
    password.len = strlen((char *) password.arr);

//  CONNECTS TO DATABASE 
    exec sql CONNECT :username IDENTIFIED BY :password;
    cout << "\nConnected to ORACLE as user: "
                << (char *)username.arr << endl << endl; 

}


void commitAndExit() {

    exec sql commit work release;
    exit(0);  
}
void sql_error(char *msg)
{
    exec sql WHENEVER SQLERROR CONTINUE;
    cout << endl << msg << endl;
    cout << sqlca.sqlerrm.sqlerrmc << endl;
    exec sql rollback release;
    exit(1);
}      

void buildAhardCodedSQL() {
    strcpy((char *)sql_statement.arr,"select supplierName ");
    strcat((char *)sql_statement.arr,"from Supplier ");
    strcat((char *)sql_statement.arr," where supplierNumber = 1 ");
    // Display the SQL statement and its current input host variable.
    cout << "Query is  " << (char *) sql_statement.arr << endl;
}

void  prepareAndExecuteIt() {

//  Prepare the query; define a cursor, execute it...

    sql_statement.len = strlen((char *) sql_statement.arr);
    exec sql PREPARE S1 FROM :sql_statement;

/* The declare statement associates a cursor with a
 * PREPAREd statement.  The cursor name, like the statement
 * name, does not appear in the Declare Section.
 * A single cursor name can not be declared more than once.
*/

    exec sql declare C1 cursor FOR S1;

    exec sql open C1  ;

    exec sql FETCH C1 INTO :outputSupplierName;

     if ( sqlca.sqlcode !=  0) {
        cout << "past fetch..." <<endl;

	cout << sqlca.sqlerrm.sqlerrmc << endl;
        exec sql rollback release;
        exit(1);
     }
     cout << "supplier name = " << (char *)outputSupplierName.arr << endl;
     exec sql close C1;
}


