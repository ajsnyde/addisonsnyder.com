Script started on Fri May 02 16:47:44 2014
sh-3.00$ pwd
/home/15/ajsnyde/cs2020rh/final
sh-3.00$ ls -l
total 28
-rw-r--r--   1 ajsnyde  ics2020rh    1208 May  2 16:39 Car.cpp
-rw-r--r--   1 ajsnyde  ics2020rh    1297 May  2 16:39 Car.h
-rw-r--r--   1 ajsnyde  ics2020rh    5698 May  2 16:48 List.cpp
-rw-r--r--   1 ajsnyde  ics2020rh     454 May  2 16:38 List.h
drwxr-sr-x   4 ajsnyde  ics2020rh     512 May  2 16:40 Old versions
-rw-r--r--   1 ajsnyde  ics2020rh     292 May  2 16:38 filedriver.cpp
-rw-r--r--   1 ajsnyde  user           0 May  2 16:47 filedriver.photo
-rw-r--r--   1 ajsnyde  ics2020rh     193 May  2 15:50 lot.txt
sh-3.00$ cat filedriver.cpp
#include "iostream"

#include "string"

#include "Car.h"

#include "List.h"



using namespace std;



int main()

{

        List Lot;

        Lot.add("Dodge", "Dakota", "Silver", "819234DHS8235", "N/A", 2001, 99458, 1200, 0);

        Lot.displaylist();

        Lot.load(Lot);

        Lot.displaylist();

        return 0;

}



sh-3.00$ cat lot.txt
Toyota

Prius

Red

182673HU38822

N/A

2006

113000

6725

0

Ford

F150

Maroon

723872UE72261

4C0052

2014

29

43720

1

Ferrari

LaFerrari

Red

28123JJ278372

2C0053

2014

2

1400000

1sh-3.00$ cat Car.cpp
#include "iostream"

#include "Car.h"

#include "string"



using namespace std;



///////////////////////////////////////////////////////////////

//      Constructor - Sets values to a default.. (no return, no parameters)

///////////////////////////////////////////////////////////////

Car::Car()

{



}



Car::Car(string tempmake, string tempmodel, string tempcolor, string tempVIN, string temptag, int tempyear, int tempmileage, int tempvalue, bool tempNEW)

{

        make = tempmake;

        model = tempmodel;

        color = tempcolor;

        VIN = tempVIN;

        tag = temptag;

        year = tempyear;

        mileage = tempmileage;

        value = tempvalue;

        NEW = tempNEW;

}



Car::Car(string tempmake, string tempmodel, string tempcolor, string tempVIN, string temptag, int tempyear, int tempmileage, int tempvalue, bool tempNEW, Car *tempnext)

{

        make = tempmake;

        model = tempmodel;

        color = tempcolor;

        VIN = tempVIN;

        tag = temptag;

        year = tempyear;

        mileage = tempmileage;

        value = tempvalue;

        NEW = tempNEW;

        next = tempnext;

}

///////////////////////////////////////////////////////////////

//      Function Name - Display

//      No parameters, void return.

///////////////////////////////////////////////////////////////sh-3.00$ cat Car.h
///////////////////////////////////////////////////////////////

// FILE NAME:           Car.h

// TITLE:                       Car Header File

// PROGRAMMER:          Addison Snyder

// FOR COURSE:          CS 2020

// DUE DATE:            4/21/2014

//

// ALL CODE IS MINE UNLESS OTHERWISE NOTED

///////////////////////////////////////////////////////////////



#ifndef CAR_H

#define CAR_H

#include "string"

using namespace std;



class Car 

{

        friend class List;

private:

        //OFFICIAL ORDER IN WHICH PARAMETERS ARE USED:

        string make;

        string model;

        string color;   //Remain consistent in naming colors. Either use legitimate manufacturer's name (Metallic Tungsten), or stick with basic (Grey).

        string VIN;             //Vehicle Identification Number (not really a number, but a series of numbers and letters)

        string tag;             //Usually 6 char. string, i.e. 4C0023 (0023 designates #, 4C describes type)

        int year;

        int mileage;

        int value;              //MSRP if new, est. market value if used

        bool NEW;               //If car has not been owned domestically, it is new (1). This includes transferred vehicles and dealer sales. Must have original window stickers, etc.



        Car *next;

public:

        Car();

        Car(string, string, string, string, string, int, int, int, bool);

        Car(string, string, string, string, string, int, int, int, bool, Car*);

};



#endifsh-3.00$ cat List.cpp
#include "iostream"
#include "List.h"
#include "fstream"

using namespace std;

List::List(void)
{
        head = NULL;
}

List::List(const List &obj)
{
        Car *IN;
        string tempmake;
        string tempmodel;
        string tempcolor;
        string tempVIN;
        string temptag;
        int tempyear;
        int tempmileage;
        int tempvalue;
        bool tempNEW;
        IN = obj.head;
        tempmake = IN->make;
        tempmodel = IN->model;
        tempcolor = IN->color;
        tempVIN = IN->VIN;
        temptag = IN->tag;
        tempyear = IN->year;
        tempmileage = IN->mileage;
        tempvalue = IN->value;
        tempNEW = IN->NEW;
        head = new Car(tempmake, tempmodel, tempcolor, tempVIN, temptag, tempyear, tempmileage, tempvalue, tempNEW);

        while(IN->next != NULL)
        {
                IN = IN->next;
                tempmake = IN->make;
                tempmodel = IN->model;
                tempcolor = IN->color;
                tempVIN = IN->VIN;
                temptag = IN->tag;
                tempyear = IN->year;
                tempmileage = IN->mileage;
                tempvalue = IN->value;
                tempNEW = IN->NEW;
                head = new Car(tempmake, tempmodel, tempcolor, tempVIN, temptag, tempyear, tempmileage, tempvalue, tempNEW, head);
        }
}

const List List::operator=(const List &right)
{
        Car *car_ptr, *next_car;

        car_ptr = head;
        while(car_ptr != NULL)
        {
                next_car = car_ptr->next;
                delete car_ptr;
                car_ptr = next_car;
        }

        string tempmake;
        string tempmodel;
        string tempcolor;
        string tempVIN;
        string temptag;
        int tempyear;
        int tempmileage;
        int tempvalue;
        bool tempNEW;

        car_ptr = right.head;
        tempmake = car_ptr->make;
        tempmodel = car_ptr->model;
        tempcolor = car_ptr->color;
        tempVIN = car_ptr->VIN;
        temptag = car_ptr->tag;
        tempyear = car_ptr->year;
        tempmileage = car_ptr->mileage;
        tempvalue = car_ptr->value;
        tempNEW = car_ptr->NEW;
        head = new Car(tempmake, tempmodel, tempcolor, tempVIN, temptag, tempyear, tempmileage, tempvalue, tempNEW);

        while(car_ptr->next != NULL)
        {
                car_ptr = car_ptr->next;
                tempmake = car_ptr->make;
                tempmodel = car_ptr->model;
                tempcolor = car_ptr->color;
                tempVIN = car_ptr->VIN;
                temptag = car_ptr->tag;
                tempyear = car_ptr->year;
                tempmileage = car_ptr->mileage;
                tempvalue = car_ptr->value;
                tempNEW = car_ptr->NEW;
                head = new Car(tempmake, tempmodel, tempcolor, tempVIN, temptag, tempyear, tempmileage, tempvalue, tempNEW, head);
        }
        return *this;
}

void List::add(string tempmake, string tempmodel, string tempcolor, string tempVIN, string temptag, int tempyear, int tempmileage, int tempvalue, bool tempNEW)
{
        if(head == NULL)
                head = new Car(tempmake, tempmodel, tempcolor, tempVIN, temptag, tempyear, tempmileage, tempvalue, tempNEW);
        else
        {
                Car *car_ptr;
                car_ptr = head;
                while(car_ptr->next != NULL)
                        car_ptr = car_ptr->next;
                car_ptr->next = new Car(tempmake, tempmodel, tempcolor, tempVIN, temptag, tempyear, tempmileage, tempvalue, tempNEW);
        }
}

void List::displaylist()
{
        Car *car_ptr;
        car_ptr = head;
        while(car_ptr != NULL)
        {
                cout << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n";
                cout << "Make:       " << car_ptr->make << "\n";
                cout << "Model:      " << car_ptr->model << "\n";
                cout << "Year:       " << car_ptr->year << "\n";
                cout << "Color:      " << car_ptr->color << "\n";
                cout << "VIN:        " << car_ptr->VIN << "\n";
                cout << "Dealer Tag: " << car_ptr->tag << "\n";
                cout << "Mileage:    " << car_ptr->mileage << "\n";
                cout << "Value:      $" << car_ptr->value << "\n";
                cout << "Condition:  ";
                if(car_ptr->NEW)
                        cout << "NEW\n";
                else
                        cout << "USED\n";
                car_ptr = car_ptr->next;
        }
}


void List::ins(string tempmake, string tempmodel, string tempcolor, string tempVIN, string temptag, int tempyear, int tempmileage, int tempvalue, bool tempNEW) 
{
        Car *car_ptr, *previous_car; 
        previous_car = NULL;
        car_ptr = NULL;
        if(head == NULL || head->make >= tempmake)
                head = new Car(tempmake, tempmodel, tempcolor, tempVIN, temptag, tempyear, tempmileage, tempvalue, tempNEW, head);
        else
        {
                previous_car = head;
                car_ptr = head->next;
                while (car_ptr != NULL && car_ptr->make < tempmake)
                        previous_car = car_ptr; car_ptr = car_ptr->next;
        }
        previous_car->next = new Car(tempmake, tempmodel, tempcolor, tempVIN, temptag, tempyear, tempmileage, tempvalue, tempNEW, car_ptr);
}
void List::del(string tempmake, string tempmodel, string tempcolor, string tempVIN, string temptag, int tempyear, int tempmileage, int tempvalue, bool tempNEW) 
{///////////////////////////////////////////////////////////NEEDS WORK!
        Car *car_ptr, *previous_car;
        previous_car = NULL;
        if (!head)
                return;
        if (head->make == tempmake)
        {
                car_ptr = head; head = head->next;
                delete car_ptr;
        }
        else
        {
                car_ptr = head;
                while (car_ptr != NULL && car_ptr->make != tempmake)
                        previous_car = car_ptr; car_ptr = car_ptr->next;
                if(car_ptr)
                {
                        previous_car->next = car_ptr->next;
                        delete car_ptr;
                }
        }
}

void List::load(List list)
{
        ifstream input;
        string file;
        string tempmake;
        string tempmodel;
        string tempcolor;
        string tempVIN;
        string temptag;
        int tempyear;
        int tempmileage;
        int tempvalue;
        bool tempNEW;
        cout << "Please enter file name: ";
        cin >> file;
                input.open("lot.txt");
        cout << "Loading " << file << ". . .\n";
        while(!input)
        {
                cout << "File not found! Please reenter name: ";
                cin >> file;
                input.open("lot.txt");
        }
        int i = 1;
        while(!input.eof())
        {
                cout << "Entering car #" << i++ << "\n";
                input >> tempmake;
                input >> tempmodel;
                input >> tempcolor;
                input >> tempVIN;
                input >> temptag;
                input >> tempyear;
                input >> tempmileage;
                input >> tempvalue;
                input >> tempNEW;
                add(tempmake, tempmodel, tempcolor, tempVIN, temptag, tempyear, tempmileage, tempvalue, tempNEW);
        }
}

List::~List()
{
        Car *car_ptr, *next_car;
        car_ptr = head;
        while(car_ptr != NULL)
        {
                next_car = car_ptr->next;
                delete car_ptr;
                car_ptr = next_car;
        }
}sh-3.00$ cat List.h
#ifndef LIST_H

#define LIST_H



#include "Car.h"



class List

{

private:

        Car *head;



public:

        List();

        List(const List&);

        ~List();

        const List operator=(const List&);

        void add(string, string, string, string, string, int, int, int, bool);

        void ins(string, string, string, string, string, int, int, int, bool);

        void del(string, string, string, string, string, int, int, int, bool);

        void displaylist();

        void load(List);

};



#endifsh-3.00$ clear
[H[2Jsh-3.00$ g++ filedriver.cpp car   Car.cpp List.cpp
In file included from filedriver.cpp:3:
Car.h:38:7: warning: no newline at end of file
In file included from filedriver.cpp:4:
List.h:23:7: warning: no newline at end of file
In file included from Car.cpp:2:
Car.h:38:7: warning: no newline at end of file
Car.cpp:44:64: warning: no newline at end of file
In file included from List.h:4,
                 from List.cpp:2:
Car.h:38:7: warning: no newline at end of file
In file included from List.cpp:2:
List.h:23:7: warning: no newline at end of file
List.cpp:232:2: warning: no newline at end of file
sh-3.00$ a.out
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Make:       Dodge
Model:      Dakota
Year:       2001
Color:      Silver
VIN:        819234DHS8235
Dealer Tag: N/A
Mileage:    99458
Value:      $1200
Condition:  USED
Please enter file name: lot.txt
Loading lot.txt. . .
Entering car #1
Entering car #2
Entering car #3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Make:       Dodge
Model:      Dakota
Year:       2001
Color:      Silver
VIN:        819234DHS8235
Dealer Tag: N/A
Mileage:    99458
Value:      $1200
Condition:  USED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Make:       Toyota
Model:      Prius
Year:       2006
Color:      Red
VIN:        182673HU38822
Dealer Tag: N/A
Mileage:    113000
Value:      $6725
Condition:  USED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Make:       Ford
Model:      F150
Year:       2014
Color:      Maroon
VIN:        723872UE72261
Dealer Tag: 4C0052
Mileage:    29
Value:      $43720
Condition:  NEW
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Make:       Ferrari
Model:      LaFerrari
Year:       2014
Color:      Red
VIN:        28123JJ278372
Dealer Tag: 2C0053
Mileage:    2
Value:      $1400000
Condition:  NEW
sh-3.00$ telnet towel.blinkenlights.nl
Trying 94.142.241.111...
Connected to towel.blinkenlights.nl.
