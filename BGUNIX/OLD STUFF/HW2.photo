Script started on Thu Oct 09 10:42:37 2014
sh-4.3$ cat HW2.cpp
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>
#include <iostream>
#include <time.h>
#include <math.h>
#include <stdbool.h>

using namespace std;

int main ()
{
        
        int childread[1], parentread[1], childwrite[1], parentwrite[1]; // used to hold data along pipe
        int one[2], two[2]; // pipe read/write indicators
        pipe(one); // 0 is read, 1 is write
        pipe(two); // 0 is read, 1 is write
        
        int pid = fork();//split into 2 proccesses

        const int REPS = 10;    // number of numbers to produce
        
        if(pid == 0)//If child
        {
                close(two[1]);
                close(one[0]);          srand (time(NULL));// seeds seperateley for child to maintain randomness
                cout << "CHILD ID: " << getpid() << "\n"; // shows child ID
                
                for(int i = 0; i < REPS; i++)
                {
                        childwrite[0] = 1;
                        read(two[0], parentread, 1); // syncs program
                        write(one[1], childwrite, 1); // writes one number to create a round robin setup
                        cout << "Child produced #" << rand() % 100 << "\n"; // shows child process and random output
                }
                close(two[0]);
                close(one[1]);
                exit(1);
        }
        else// If parent
        {
                cout << "PARENT ID: " << getpid() << "\n";
                close(two[0]);
                close(one[1]);
                for(int i = 0; i < REPS; i++)
                {
                        parentwrite[0] = 1;
                        write(two[1], parentwrite, 1);
                        read(one[0], childread, 1); // gets 'ready' from child
                        cout << "Parent produced #" << rand() % 100 << "\n"; // shows parent process and random output
                }
                close(two[1]);
                close(one[0]);
                exit(1);
        }
}
sh-4.3$ g++ HW2.cpp
sh-4.3$ clear
[H[2Jsh-4.3$ a.out
PARENT ID: 19437
CHILD ID: 19438
Child produced #74
Parent produced #38
Child produced #68
Parent produced #58
Child produced #47
Parent produced #13
Child produced #95
Parent produced #15
Child produced #60
Parent produced #51
Child produced #16
Parent produced #27
Child produced #84
Parent produced #10
Child produced #84
Parent produced #19
Child produced #7
Parent produced #12
Child produced #27
Parent produced #86
sh-4.3$ a.out
PARENT ID: 19440
CHILD ID: 19441
Child produced #17
Parent produced #38
Child produced #46
Parent produced #58
Child produced #4
Parent produced #13
Child produced #16
Parent produced #15
Child produced #81
Parent produced #51
Child produced #24
Parent produced #27
Child produced #2
Parent produced #10
Child produced #35
Parent produced #19
Child produced #39
Parent produced #12
Child produced #59
Parent produced #86
sh-4.3$ a.out
PARENT ID: 19442
CHILD ID: 19443
Child produced #34
Parent produced #38
Child produced #45
Parent produced #58
Child produced #7
Parent produced #13
Child produced #10
Parent produced #15
Child produced #90
Parent produced #51
Child produced #61
Parent produced #27
Child produced #95
Parent produced #10
Child produced #82
Parent produced #19
Child produced #31
Parent produced #12
Child produced #32
Parent produced #86
sh-4.3$ exit

script done on Thu Oct 09 10:43:19 2014
